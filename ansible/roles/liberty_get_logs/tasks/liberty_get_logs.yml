---
- name: Any Liberty logs block
  when: 
    - not (more_enabled | default(false))
  block:
    - name: Any Liberty logs?
      ansible.builtin.stat:
        path: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/logs" #Testing if the logs directory is empty.
      register: islogs

    - name: Archive the liberty logs dir to fetch
      when: islogs.stat.exists
      ignore_errors: true # ignore errors, if there are a lot of errors the logs will rollover causing the archive to fail
      community.general.archive:
        path:
          - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/logs/*" # needs * to allow the exclude_path to work
        dest: logs.zip
        exclude_path:
          - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/logs/state"
          - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/logs/tracedata"
        exclusion_patterns:
          - '*.zip'
          - '*.tar'
          - '*.gz'
          - 'trace*.log'
        format: zip
        mode: '0755'

- name: Any MoRE Liberty logs block
  when: more_enabled | default(false)
  block:
    - name: Any MoRE logs?
      ansible.builtin.stat:
        path: "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/{{ wl_server }}/logs" 
      register: islogs

    - name: Archive the liberty MoRE logs dir to fetch
      when: islogs.stat.exists
      ignore_errors: true # ignore errors, if there are a lot of errors the logs will rollover causing the archive to fail
      community.general.archive:
        path:
          - "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/{{ wl_server }}/logs/*" # needs * to allow the exclude_path to work
        dest: logs.zip
        exclude_path:
          - "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/{{ wl_server }}/logs/state"
          - "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/{{ wl_server }}/logs/tracedata"
        exclusion_patterns:
          - '*.zip'
          - '*.tar'
          - '*.gz'
          - 'trace*.log'
        format: zip
        mode: '0755'

- name: Any logs.zip
  ansible.builtin.stat:
    path: logs.zip
  register: islogszip

- name: Log archive logic
  when: islogszip.stat.exists
  block: 

    - name: Create local logs dir
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs/"
        state: directory
        mode: '0755'

    - name: fetch the liberty log archive
      ansible.builtin.fetch:
        flat: true
        src: logs.zip
        dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/"

    - name: Remove temp logs.zip
      ansible.builtin.file:
        path: logs.zip
        state: absent

    - name: Extract the liberty log archive
      delegate_to: localhost
      ansible.builtin.unarchive:
        src: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs.zip"
        dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs/"
        remote_src: false

    - name: Find files with restricted permissions
      ansible.builtin.find:
        paths: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs/"
        file_type: file
        recurse: true
      register: found_files
      no_log: true

    - name: Change permissions from to 0755
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ found_files.files }}"
      when: item.mode != '0755'
      no_log: true

    # - name: List the contents of the logs zip file ( debug )
    #   delegate_to: localhost
    #   ansible.builtin.shell: "unzip -l {{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs.zip"
    #   register: zipcontents

    # - name: List the contents of the logs zip file output ( debug )
    #   debug:
    #     msg: "{{ zipcontents.stdout_lines }}"

    - name: Remove logs.zip
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs.zip"
        state: absent

    - name: Log/error directory location
      ansible.builtin.debug:
        msg: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers/{{ wl_server }}/logs/"

    # - name: Is verboseGC set?
    #   when: verboseGC is defined
    #   ansible.builtin.debug:
    #     msg: "{{ verboseGC }}"

    - name: Verbose GC log processing
      when: verboseGC|bool
      block: 
        - name: Run the IBM verbosegc logic
          ansible.builtin.include_role:
            name: ibm_vbgc
          vars:
            vbgc_dir: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/servers"

        - name: Run the IBM verbosegc report logic
          run_once: true
          ansible.builtin.include_role:
            name: ibm_vbgc_report
          vars:
            vbgc_report_dir: "{{ logs_dir }}/{{ env_name }}"
