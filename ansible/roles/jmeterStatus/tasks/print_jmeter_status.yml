---
- name: Print Jmeter status
  when: groups.stress is defined
  block:

    - name: Create local logs dir
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}"
        state: directory
        mode: '0755'

    - name: Gather info for container
      containers.podman.podman_container_info:
        name: '{{ svt_jmeter_container_name }}'
      register: container_info

    - name: Jmeter container is not running
      delegate_to: localhost
      when: container_info.containers[0] is not defined
      ansible.builtin.template:
        src: container_status_notrunning.json.j2
        dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ status_json_file }}"
        mode: '0444'

    - name: Jmeter container is running
      when: 
        - container_info.containers[0] is defined
        - container_info.containers[0].State.Status == 'running'
      block:

      - name: Get the Jmeter container status
        containers.podman.podman_container_exec:
          name: "{{ svt_jmeter_container_name }}"
          command: "jmeter_json_payload.sh"
        register: jmeterStatus

      - name: Try parsing JSON to check validity
        set_fact:
          parsed_json: "{{ jmeterStatus | from_json }}"
        failed_when: false
        ignore_errors: true
        no_log: false

      - name: Jmeter debug
        ansible.builtin.debug:
          msg: "{{ parsed_json }}"
        ignore_errors: true
        no_log: false
        failed_when: false

      - name: Handle invalid JSON
        when: parsed_json is not defined
        block:

          - name: Jmeter status is not valid JSON
            delegate_to: localhost
            ansible.builtin.template:
              src: container_status_notrunning.json.j2
              dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ status_json_file }}"
              mode: '0444'

      - name: Jmeter status is valid JSON
        when: parsed_json is defined
        block:

          - name: Add the hostname to the status
            ansible.builtin.set_fact:
              jmeter_status: "{{{ ansible_fqdn : jmeterStatus.stdout | from_json }}}"

          - name: Save Jmeter status to stress_status
            delegate_to: localhost
            ansible.builtin.copy:
              content: "{{ jmeter_status }}"
              dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ status_json_file }}"
              mode: '0444'
